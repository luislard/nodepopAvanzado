#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodepop:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Inicio de control cluster.

// Si soy el master creo N clones de mi mismo

const cluster = require('cluster'); // no hay que hacer npm install porque ya vienen en el core de nodejs


cluster.on('listening', (worker, address)=>{
  console.log(`Worker ${worker.id} con pid ${worker.process.pid} is listening on ${address.port}.`);
});

// agregamos un notificador cuando el worker se desconecte

cluster.on('disconnect', (worker)=>{
  console.log(`The worker #${worker.id} has been disconnected.`);
});

cluster.on('exit', (worker, code, signal)=>{
  console.log(`Worker ${worker.process.pid} died with code: ${code}, and signal: ${signal}`);
  console.log('Starting new worker...');
  cluster.fork();
});

if (cluster.isMaster) {

  const numCPUs = require('os').cpus().length;
  for(let i = 0; i < numCPUs; i++) {
    const worker = cluster.fork();

    // para enviarle un mensaje al worker
    setTimeout(()=>{
      worker.send('mensaje desde el master');
    },5000);
  }

} else {


  // Si soy un clone/worker arranco la aplicaciÃ³n 

  process.on('message', message =>{
    console.log('El master ha dicho ', message);
    // aqui se le puede decir al worker que se suicide
  });

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
